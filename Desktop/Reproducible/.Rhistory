## Return a matrix that is the inverse of 'x'
if(!is.null(i)) {
message("getting cached data")
i
}
i <- NULL
if(!is.null(i)) {
message("getting cached data")
i
}
data <- x
i <- solve(data, ...)
i
}
if(!is.null(i)) {
message("getting cached data")
i
}
data <- x
i <- solve(data, ...)
i
## Return a matrix that is the inverse of 'x'
if(!is.null(i)) {
message("getting cached data")
i
}
data <- x
i <- solve(data)
i
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
makeCacheMatrix()
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
makeCacheMatrix()
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
makeCacheMatrix()
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
makeCacheMatrix()
cacheSolve()
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
cacheSolve()
makeCacheMatrix()
cacheSolve()
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
makeCacheMatrix()
cacheSolve()
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
makeCacheMatrix()
cacheSolve()
debug(cacheSolve)
debug(cacheSolve())
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
cacheSolve()
i <-NULL
cacheSolve()
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
cacheSolve()
x ->> x
if(!is.null(i)) {
message("getting cached data")
i
} else {
data <- x
i <- solve(data)
i
}
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
makeCacheMatrix()
cacheSolve()
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
cacheSolve()
y <- matrix(1:4, 2, 2)
cacheSolve()
debug(cacheSolve())
debug(cacheSolve())
y
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
cacheSolve()
recursive
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
cacheSolve()
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
cacheSolve(x)
cacheSolve(x)
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
cacheSolve(x)
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
cacheSolve(x)
cacheSolve(x)
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
makeCacheMatrix()
cacheSolve(x)
cacheSolve(x)
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
cacheSolve(x)
i <- NULL
cacheSolve(x)
source('C:/Users/user/Desktop/Coursera Data Science Sequence/R Programming Course/test3.R')
source('C:/Users/user/rprog2/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/user/rprog2/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/user/rprog2/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/user/rprog2/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/user/rprog2/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/user/rprog2/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/user/rprog2/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/user/rprog2/ProgrammingAssignment2/cachematrix.R')
set.seed(1)
rpoison(5, 2)
rpois(5, 2)
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file(d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
data <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
data <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "RExploratory")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()qplot(votes, rating, data = movies, smooth = "loess")
setwd("C:/Users/user/Desktop/Coursera Data Science Sequence/Reproducible")
data <- read.csv("./activity.csv")
View(data)
summary(data)
hist(data$steps)
hist.Date(data$steps, "days")
hist.Date(data$steps, breaks = data$date)
hist(data$steps, breaks = data$date)
hist(data$steps, breaks = data$date)
data2 <- na.omit(data)
hist(data2$steps, breaks = data2$date)
sapply(data2$steps, mean)
tapply(data2$steps, data2$date, mean)
meanstep <- as.data.frame(tapply(data2$steps, data2$date, mean))
View(meanstep)
medianstep <- as.data.frame(tapply(data2$steps, data2$date, median))
View(medianstep)
hist(data2$steps)
library(ggplot2)
qplot(data2$steps, data2$date)
qplot(data2$date, data2$steps)
totalsteps<- tapply(data2$steps, data2$date, sum)
qplot(data2$date, totalsteps)
totalsteps<- as.data.frame(tapply(data2$steps, data2$date, sum))
qplot(data2$date, totalsteps)
library(lattice)
barchart(data2$date, totalsteps)
barchart(totalsteps, data2$date)
qplot(totalsteps, date, data2)
qplot(steps, date, data2)
barplot(totalsteps, data2$date)
barplot(totalsteps)
totalsteps<- tapply(data2$steps, data2$date, sum)
barplot(totalsteps)
View(data2)
mean(data2$steps)
median(data2$steps)
intavg<-tapply(data2$steps, data2$interval, mean)
intavg<-as.data.frame(tapply(data2$steps, data2$interval, mean))
View(intavg)
qplot(intavg)
avg <- tapply(data2$steps, data2$interval, mean)
intavg<-as.data.frame(avg)
View(intavg)
xyplot(intavg$avg ~ intavg$row.names)
data$date<- strptime(data$date, "%Y-%m-%d")
View(data)
data2 <- na.omit(data)
#Histogram of steps per day, median steps per day, mean steps per day
totalsteps<- tapply(data2$steps, data2$date, sum)
barplot(totalsteps)
mean(data2$steps)
median(data2$steps)
#average daily activity pattern
avg <- tapply(data2$steps, data2$interval, mean)
intavg<-as.data.frame(avg)
totalsteps<- tapply(data2$steps, data2$date, sum)
setwd("C:/Users/user/Desktop/Coursera Data Science Sequence/Reproducible")
data <- read.csv("./activity.csv")
data$date<- strptime(data$date, "%Y-%m-%d")
data2 <- na.omit(data)
#Histogram of steps per day, median steps per day, mean steps per day
totalsteps<- tapply(data2$steps, data2$date, sum)
setwd("C:/Users/user/Desktop/Coursera Data Science Sequence/Reproducible")
data <- read.csv("./activity.csv")
data$date<- strptime(data$date, "%Y-%m-%d")
data2 <- na.omit(data)
#Histogram of steps per day, median steps per day, mean steps per day
totalsteps<- tapply(data2$steps, data2$date, sum)
barplot(totalsteps)
mean(data2$steps)
median(data2$steps)
totalsteps<-tapply(data2$steps, data2$date, sum)
#loading data#
setwd("C:/Users/user/Desktop/Coursera Data Science Sequence/Reproducible")
data <- read.csv("./activity.csv")
data2 <- na.omit(data)
#Histogram of steps per day, median steps per day, mean steps per day
totalsteps<-tapply(data2$steps, data2$date, sum)
barplot(totalsteps)
mean(data2$steps)
median(data2$steps)
avg <- tapply(data2$steps, data2$interval, mean)
intavg<-as.data.frame(avg)
data$date<- strptime(data$date, "%Y-%m-%d")
data <- read.csv("./activity.csv")
avg <- tapply(data2$steps, data2$interval, mean)
intavg<-as.data.frame(avg)
data2$date<- strptime(data2$date, "%Y-%m-%d")
xyplot(intavg$avg ~ intavg$row.names)
avg <- tapply(data2$steps, data2$interval, mean)
xyplot(intavg$avg ~ intavg$row.names)
View(intavg)
plot(intavg$row.names, intavg$avg)
length(intavg$row.names)
plot(data2$interval, intavg$avg)
View(data2)
length(data2$interval)
length(intavg$avg)
plot(intavg)
plot(intavg, type = "1")
plot(intavg, type = "l")
plot(intavg, type = "l", xlab = "Interval", ylab = "Average Steps")
max(intavg)
which.max(intavg)
which.max(avg)
intavg$interval <- seq(0, 2355, 5)
avg <- tapply(data$steps, data$interval, mean)
intavg<-as.data.frame(avg)
intavg$interval <- seq(0, 2355, 5)
avg <- tapply(data$steps, data$interval, mean)
summary(data2$interval)
summary(data2)
seq(0. 2355, 5)
seq(0,2355, 5)
avg <- tapply(data$steps, data$interval, mean)
avg <- apply(data$steps, data$interval, mean)
avg <- sapply(data$steps, data$interval, mean)
avg <- mapply(data$steps, data$interval, mean)
avg <- lapply(data$steps, data$interval, mean)
avg <- tapply(data2$steps, data2$interval, mean)
intavg<-as.data.frame(avg)
intavg$interval <- intavg$rown.names
View(intavg)
intavg$interval <- intavg$row.names
View(intavg)
intavg$interval <- data2[1:288,3]
View(intavg)
plot(intavg, type = "l", xlab = "Interval", ylab = "Average Steps")
plot(x = intavg$interval, y = intavg$avg, type = "l", xlab = "Interval", ylab = "Average Steps")
which.max(intavg)
max(intavg)
subset(intavg, max(intavg$avg))
subset(intavg, intavg$avg == max(intavg$avg))
subset(intavg, intavg$avg == max(intavg$avg))
subset(intavg, intavg$avg == max(intavg$avg), drop = TRUE)
subset(intavg, intavg$avg == max(intavg$avg), drop = FALSE)
intavg[max(intavg$avg)]
intavg[,max(intavg$avg)]
nanum <- is.na(data)
nanum <- sum(is.na(data))
sum(is.na(data))
data[is.na(data)]<- tapply(data$steps, data$date, mean)
replace(data, is.na(data), tapply(data$steps, data$date, mean))
replace(data, is.na(data), mean(data$steps))
mean(data2$steps)
tapply(data$steps, data$date, mean)
data <- read.csv("./activity.csv")
if(is.na(data)= TRUE) [
replace(i, interval, avg)]
f(is.na(data)= TRUE) {
replace(i, interval, avg)}
if(is.na(data)= TRUE) {
replace(i, interval, avg)
}
if(is.na(data)= TRUE) {
replace(i, interval, avg)
}
if(is.na(data)= TRUE) replace(i, interval, avg)
if(is.na(data) = TRUE) replace(i, interval, avg)
if(is.na(data) == TRUE) replace(i, interval, avg)
View(data)
replace(is.na(data), data$interval, avg)
View(data)
replace(data$steps, is.na(data), avg)
View(data)
View(data2)
View(data)
data[is.na(data)]<- avg
View(data)
totalsteps<-tapply(data$steps, data$date, sum)
barplot(totalsteps)
mean(data$steps)
median(data$steps)
mean(data2$steps)
plot(x = intavg$interval, y = intavg$avg, type = "l", xlab = "Interval", ylab = "Average Steps")
barplot(totalsteps)
barplot(totalsteps)
totalsteps<-tapply(data2$steps, data2$date, sum)
barplot(totalsteps)
data <- read.csv("./activity.csv")
data2 <- na.omit(data)
totalsteps<-tapply(data2$steps, data2$date, sum)
barplot(totalsteps)
totalsteps2<-tapply(data$steps, data$date, sum)
barplot(totalsteps2)
barplot(totalsteps)
data[is.na(data)]<- avg
#histogram, median, and mean for new data set
totalsteps2<-tapply(data$steps, data$date, sum)
barplot(totalsteps2)
weekdays(data$date)
data$date <- as.character.date(data$date)
data$date <- as.character.Date(data$date)
View(data)
weekdays(data$date)
data$date <- as.Date(data$date)
weekdays(data$date)
View(data)
data$day <- c(0)
wdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
if(weekdays(data$date) %in% wdays) data$day == "Weekday"
else data$day == "weekend"
View(data)
if(weekdays(data$date) %in% wdays) data$day == "Weekday"
View(data)
weekday(data@date)
weekdays(data$date)
if((weekdays(data$date) %in% wdays) = TRUE) data$day == "Weekday"
else data$day == "weekend"
View(data)
if((weekdays(data$date) %in% wdays) = TRUE) data$day == "Weekday"
if((weekdays(data$date) %in% wdays) = FALSE) == "weekend"
if((weekdays(data$date) %in% wdays) == TRUE) data$day == "Weekday"
if((weekdays(data$date) %in% wdays) == FALSE) == "weekend"
if((weekdays(data$date) %in% wdays) == TRUE) data$day == "weekday"
if((weekdays(data$date) %in% wdays) == TRUE) data$day <- "weekday"
if((weekdays(data$date) %in% wdays) == TRUE) data$day <- "weekday"
View(data)
if((weekdays(data$date) %in% wdays) == FALSE) data$day <- "weekend"
summary(data$day)
data$day <- as.factor(data$day)
summary(data$day)
if((weekdays(data$date) %in% wdays) == TRUE) data$day <- "weekday"
if((weekdays(data$date) %in% wdays) == FALSE) data$day <- "weekend"
summary(data$day)
View(data)
data$day <- as.factor(data$day)
summary(data$day)
data$day <- c(0)
summary(data$day)
data$day <- weekdays(data$date)
View(data)
wedays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
if((data$date %in% wedays) == TRUE) data$day <- "weekday"
if((data$date %in% wedays) == FALSE) data$day <- "weekend"
View(data)
data$day <- weekdays(data$date)
data$day %in% wedays
if(data$date %in% wedays) data$day <- "weekday"
data$day <- weekdays(data$date)
if(data$day %in% wedays) data$day <- "weekday"
View(data)
summary(data$day)
data$day <- as.factor(data$day)
data$day <- as.factor(data$day)
summary(data$day)
data$day <- weekdays(data$date)
if(data$day %in% wedays) data$day = "weekday"
View(data)
data$day <- as.factor(data$day)
summary(data$day)
data$day <- weekdays(data$date)
data[data$day %in% wedays] <- "weekday"
subset(data, data$day %in% wedays) <- "weekday"
View(data)
replace(data$day, wedays, "weekday")
View(data)
replace(data$day, (data$day %in% wedays), "weekday")
View(data)
summary(data$day)
data$day <- as.factor(data$day)
summary(data$day)
wedays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
data$day <- replace(data$day, (data$day %in% wedays), "weekday")
data$day <- replace(data$day, wedays, "weekday")
View(data)
data$day <- weekdays(data$date)
data$day <- as.factor(data$day)
data$day <- replace(data$day, wedays, "weekday")
?"["
data$day <- replace(data$day, data$day %in% wedays, "weekday")
View(data)
data$day <- weekdays(data$date)
data$day <- replace(data$day, wedays, "weekday")
View(data)
data$day <- replace(data$day, wedays, weekday)
weekday<- "weekday"
data$day <- replace(data$day, wedays, weekday)
for(i in data$day) if(data$day %in% wedays) <- "weekday"
for(i in data$day) if(weekdays(data$date) %in% wedays) <- "weekday"
View(data)
data$day[data$day %in% wedays] <- "weekday"
View(data)
enddays <- c("Saturday", "Sunday")
data$day[data$day %in% enddays] <- "weekend"
data$day <- as.factor(data$day)
summary(data$day)
library(lattice)
avg2 <- tapply(data$steps, data$interval, mean)
intavg2<-as.data.frame(avg2)
intavg2$interval <- data[1:288,3]
View(intavg2)
xyplot(tapply(data$steps, data$interval, mean) ~ interval|day)
xyplot(tapply(data$steps, data$interval, mean) ~ interval| day, data =  data, type =,"l")
xyplot(avg2 ~ interval| day, data =  data, type =,"l")
xyplot(avg2 ~ interval| day, data = data, type =,"l")
xyplot(avg2 ~ interval| day, data = data, type = "l")
xyplot(tapply(data$steps, data$interval, mean) ~ interval| day, data = data, type = "l")
xyplot(tapply(data$steps, data$day, mean) ~ interval| day, data = data, type = "l")
wedaydat <- subset(data, data$day == "weekday")
enddaydat <- subset(data, data$day == "weekend")
wedayavg <- tapply(wedaydat$steps, data$interval, mean)
enddayavg <- tapply(enddaydat$steps, data$interval, mean)
wedayavg <- tapply(wedaydat$steps, wedaydat$interval, mean)
enddayavg <- tapply(enddaydat$steps, enddaydat$interval, mean)
interval <- data[1:288,3]
xyplot(wedayavg ~ interval| day, data = data, type = "l")
data3 <- as.data.frame(c(wedayavg, enddayavg, interval))
View(data3)
data3 <- as.data.frame(wedayavg, enddayavg, interval)
data3 <- matrix(wedayavg, enddayavg, interval)
data3 <- as.data.frame(wedayavg)
View(data3)
data3$enddayavg <- as.data.frame(enddayavg)
View(data3)
data3$enddayavg <- enddayavg
View(data3)
data3$interval <- interval
xyplot(wedayavg|enddayavg ~ interval, data = data3, type = "l")
View(enddaydat)
View(enddaydat)
install.packages("dplyr")
library(dplyr)
group_by(data, day, interval)
xyplot( (tapply(data$steps, data$interval, mean) ~ interval | day, data = data, type = "l")
xyplot( (tapply(data$steps, data$interval, mean) ~ interval|day, data = data, type = "l")
xyplot((tapply(data$steps, data$interval, mean) ~ interval|day, data = data, type = "l")
xyplot((tapply(data$steps, data$interval, mean) ~ interval, data = data, type = "l")
xyplot((tapply(data$steps, data$interval, mean) ~ interval)
)
xyplot((tapply(data$steps, data$interval, mean)) ~ interval|day)
xyplot((tapply(data$steps, data$interval, mean)) ~ interval|day, data=data)
data<- group_by(day, interval)
xyplot(steps ~ interval|day, panel = tapply(data$steps, data$interval, mean) data=data))
library(lattice)
xyplot(steps ~ interval|day, data = data, panel = tapply(data$steps, data$interval, mean))
xyplot(steps ~ interval|day, data = data, panel = function(steps, interval){
tapply(data$steps, data$interval, mean)
)}
xyplot(steps ~ interval|day, data = data, panel = function(steps, interval){
panel.average(steps, interval)
}
)
xyplot(steps ~ interval|day, data = data, panel = function(steps, interval){
panel.average(steps, interval, data = data)
})
xyplot(steps ~ interval|day, data = data, panel = function(steps, interval){
panel.average(data$steps, data$interval)
})
setwd("C:/Users/user/Desktop/Coursera Data Science Sequence/Reproducible")
data <- read.csv("./activity.csv")
data[is.na(data)]<- avg
data$date <- as.Date(data$date)
wedays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
enddays <- c("Saturday", "Sunday")
data$day <- weekdays(data$date)
data$day[data$day %in% wedays] <- "weekday"
data$day[data$day %in% enddays] <- "weekend"
data$day <- as.factor(data$day)
avg <- tapply(data2$steps, data2$interval, mean)
data2 <- na.omit(data)
avg <- tapply(data2$steps, data2$interval, mean)
data[is.na(data)]<- avg
xyplot(steps ~ interval|day, data = data, panel = function(steps, interval){
panel.average(data$steps, data$interval)
xyplot(steps ~ interval|day, data = data, panel = function(steps, interval){
panel.average(data$steps, data$interval)
})
xyplot(steps ~ interval|day, data = data, panel = function(steps, interval){
panel.average(data$interval, data$steps)
})
xyplot(steps ~ interval|day, data = data, panel = function(steps, interval){
panel.average(data$steps)
})
xyplot(steps ~ interval|day, panel = function(steps, interval){
panel.xyplot(steps ~ interval|day, data = data)
panel.average(data$steps)
})
xyplot(steps ~ interval|day, data = data, type = "a")
hist(totalsteps)
totalsteps<-tapply(data2$steps, data2$date, sum)
hist(totalsteps)
totalsteps2<-tapply(data$steps, data$date, sum)
hist(totalsteps2)
